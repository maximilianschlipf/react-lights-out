{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Maximilian\\\\Desktop\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n      // While this.props.nrows > 0: create new array with this.props.ncols entries\n\n      var rowCount = this.props.nrows;\n\n      while (rowCount > 0) {\n        var newArr = [];\n\n        for (var i = 0; i < this.props.ncols; i++) {\n          // Compare rnd float to chance props and add a boolean to the array accordingly\n          var rndFloat = parseFloat(Math.random().toFixed(1));\n\n          if (rndFloat <= this.props.chanceLightStartsOn) {\n            newArr.push(true);\n          } else {\n            newArr.push(false);\n          }\n        }\n\n        board.push(newArr);\n        rowCount -= 1;\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine if the game has been won\n      // I COMMENTED OUT THIS:\n      // this.setState({ board, hasWon });\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.board.map(function (row) {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, row.map(function (cell) {\n          return React.createElement(Cell, {\n            isLit: cell,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          });\n        }));\n      }))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.5 // Random would be: parseFloat(Math.random().toFixed(1))\n\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/Maximilian/Desktop/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","rowCount","nrows","newArr","i","ncols","rndFloat","parseFloat","Math","random","toFixed","chanceLightStartsOn","push","coord","split","map","Number","y","x","flipCell","row","cell","flipCellsAround","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAQL,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,+EAAMA,KAAN,GADkB,CAGlB;;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFK,KAAb;AAJkB;AAQlB;AAED;;;;;kCAEc;AACb,UAAID,KAAK,GAAG,EAAZ,CADa,CAEb;AACA;;AACA,UAAIE,QAAQ,GAAG,KAAKL,KAAL,CAAWM,KAA1B;;AAEA,aAAOD,QAAQ,GAAG,CAAlB,EAAqB;AACpB,YAAIE,MAAM,GAAG,EAAb;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AAC1C;AACA,cAAIE,QAAQ,GAAGC,UAAU,CAACC,IAAI,CAACC,MAAL,GAAcC,OAAd,CAAsB,CAAtB,CAAD,CAAzB;;AACA,cAAIJ,QAAQ,IAAI,KAAKV,KAAL,CAAWe,mBAA3B,EAAgD;AAC/CR,YAAAA,MAAM,CAACS,IAAP,CAAY,IAAZ;AACA,WAFD,MAEO;AACNT,YAAAA,MAAM,CAACS,IAAP,CAAY,KAAZ;AACA;AACD;;AACDb,QAAAA,KAAK,CAACa,IAAN,CAAWT,MAAX;AACAF,QAAAA,QAAQ,IAAI,CAAZ;AACA;;AAED,aAAOF,KAAP;AACA;AAED;;;;oCAEgBc,K,EAAO;AAAA,wBACC,KAAKjB,KADN;AAAA,UAChBS,KADgB,eAChBA,KADgB;AAAA,UACTH,KADS,eACTA,KADS;AAEtB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFsB,6BAGTc,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHS;AAAA;AAAA,UAGjBC,CAHiB;AAAA,UAGdC,CAHc;;AAKtB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACvB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGb,KAAd,IAAuBY,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGf,KAAzC,EAAgD;AAC/CH,UAAAA,KAAK,CAACkB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACnB,KAAK,CAACkB,CAAD,CAAL,CAASC,CAAT,CAAf;AACA;AACD,OAXqB,CAatB;AAEA;AACA;AAEA;AACA;;AACA;AAED;;;;6BAES;AAAA;;AACR,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKrB,KAAL,CAAWE,KAAX,CAAiBgB,GAAjB,CAAqB,UAAAK,GAAG,EAAI;AAC5B,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACEA,GAAG,CAACL,GAAJ,CAAQ,UAAAM,IAAI,EAAI;AAChB,iBACC,oBAAC,IAAD;AACC,YAAA,KAAK,EAAEA,IADR;AAEC,YAAA,iBAAiB,EAAE,MAAI,CAACC,eAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAMA,SAPA,CADF,CADD;AAYA,OAbA,CADF,CADD,CADD,CADQ,CAqBR;AAEA;AAEA;AAEA;AACA;;;;EAlGkB7B,S;;AAAdE,K,CACE4B,Y,GAAe;AACrBrB,EAAAA,KAAK,EAAE,CADc;AAErBG,EAAAA,KAAK,EAAE,CAFc;AAGrBM,EAAAA,mBAAmB,EAAE,GAHA,CAIrB;;AAJqB,C;AAoGvB,eAAehB,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.5\n\t\t// Random would be: parseFloat(Math.random().toFixed(1))\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// TODO: set initial state\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\t}\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\tcreateBoard() {\n\t\tlet board = [];\n\t\t// TODO: create array-of-arrays of true/false values\n\t\t// While this.props.nrows > 0: create new array with this.props.ncols entries\n\t\tlet rowCount = this.props.nrows;\n\n\t\twhile (rowCount > 0) {\n\t\t\tlet newArr = [];\n\t\t\tfor (let i = 0; i < this.props.ncols; i++) {\n\t\t\t\t// Compare rnd float to chance props and add a boolean to the array accordingly\n\t\t\t\tlet rndFloat = parseFloat(Math.random().toFixed(1));\n\t\t\t\tif (rndFloat <= this.props.chanceLightStartsOn) {\n\t\t\t\t\tnewArr.push(true);\n\t\t\t\t} else {\n\t\t\t\t\tnewArr.push(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tboard.push(newArr);\n\t\t\trowCount -= 1;\n\t\t}\n\n\t\treturn board;\n\t}\n\n\t/** handle changing a cell: update board & determine if winner */\n\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [y, x] = coord.split(\"-\").map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\n\t\t// TODO: flip this cell and the cells around it\n\n\t\t// win when every cell is turned off\n\t\t// TODO: determine if the game has been won\n\n\t\t// I COMMENTED OUT THIS:\n\t\t// this.setState({ board, hasWon });\n\t}\n\n\t/** Render game board or winning message. */\n\n\trender() {\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.state.board.map(row => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{row.map(cell => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\t\t\t\t\tisLit={cell}\n\t\t\t\t\t\t\t\t\t\t\tflipCellsAroundMe={this.flipCellsAround}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t\t// if the game is won, just show a winning msg & render nothing else\n\n\t\t// TODO\n\n\t\t// make table board\n\n\t\t// TODO\n\t}\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}